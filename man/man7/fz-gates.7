.Dd 2024-05-01
.Dt fz-gates 7
.Os
.Sh NAME
.Nm fz-gates
.Nd A development guide for making your own fz gates.
.Sh DESCRIPTION
Gates govern when notifiers execute. They provide a high degree of control over exactly the conditions in which an alert may be raised. They base their decisions from the task's metadata received in the environment.
.Sh ENVIRONMENT
Gates are executed with metadata of the triggering task available in its environment.
.Bl -tag -width STATE_CHANGED
.It Cm FREQUENCY
The
.Ar frequency
of the task
.It Cm TASK_COMMAND
The
.Ar command
of the task.
.It Cm LAST_STATE
The last stable state. Not to be confused with STATE.
.Op ok, fail
.It Cm LAST_OK
The epoch when the task was last in an ok state.
.It Cm LAST_FAIL
The epoch when the task was last in a fail state.
.It Cm LAST_NOTIFICATION
The epoch of the last notification sent through this notifier. Tasks hold the last notification time for each notifier, but only the last notification time for this notifier is available in a gate.
.It Cm PRIORITY
The
.Ar priority
of the task.
.It Cm STATE
The current state of the task. A value of 'unknown' represents that the task is in an unstable state and is executing at its retry_interval.
.Op ok, fail, unknown
.It Cm STATE_CHANGED
Whether the current stable state matches the last stable state.
.Op true, false
.It Cm HISTORY
A uint32 representing the last 32 executions results of the task. Read using bitwise operators; high is ok and low is fail. The least significant bit is the most recent execution.
.It Cm HISTORY_MASK
A uint32 representing how much of the history contains values. This needed to tell how many of the leading zeros in HISTORY are significant. Read using bitwise operators; high represents a measurement and low does not.
.Sh EXIT CODES
The following exit codes are recognised:
.Pp
.Bl -tag -width XX
.It Cm 0
The gate is open, permitting the notifier to execute.
.El
.Pp
Any other exit code closes the gate preventing the notifier from executing.
.Sh CONSIDERATIONS
Gates should be stateless. Rarely, will they depend on more than the provided metadata. They have a fixed timeout of one second which if exceeded, results in the gate being closed. Gate timeouts are logged as errors and must be prevented otherwise alerts will be dropped.
.Pp
Gates are not retried, and cannot return an unknown state.
